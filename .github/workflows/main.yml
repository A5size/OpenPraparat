name: Makefile CI

on:
  push:
    tags:
      - '*'

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        
  build:
    name: release_assets
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup Ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt install build-essential gfortran
        sudo apt install libglu1-mesa-dev mesa-common-dev
        sudo apt install libglfw3 libglfw3-dev
        
    - name: Setup Windows
      if: ${{ matrix.os == 'windows-latest' }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
      
    - name: Setup MSYS2
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        echo y|pacman -Sy
        echo y|pacman -Su

        echo y|pacman -S mingw-w64-x86_64-gcc
        echo y|pacman -S make
        echo y|pacman -S zip
        echo y|pacman -S mingw-w64-x86_64-pkg-config
        echo y|pacman -S mingw-w64-x86_64-glfw
        echo y|pacman -S mingw-w64-x86_64-gcc-fortran
        echo y|pacman -S mingw-w64-x86_64-gcc-libgfortran
        cd src
        make all install
      
    - name: Setup Environment Mac
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install glfw3 zip gfortran
        
    - name: package make
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        cd src
        make all install
      
    - name: package make on windows binary
      if: ${{ matrix.os == 'windows-latest' }}
      shell: msys2 {0}
      run: |
        cd src
        ./link4win.sh
        cd ..
        zip -r OpenPraparat.zip build
        
    - name: zip
      if: ${{ matrix.os != 'windows-latest' }}
      run: zip -r OpenPraparat.zip build
        
    - name: Upload Release Asset
      if: always()
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} 
        asset_path: OpenPraparat.zip
        asset_name: OpenPraparat-${{ matrix.os }}
        asset_content_type: application/zip
